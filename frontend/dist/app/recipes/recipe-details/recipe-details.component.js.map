{"version":3,"sources":["recipes/recipe-details/recipe-details.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAiC,eAAe,CAAC,CAAA;AAEjD,+BAA8B,6BAA6B,CAAC,CAAA;AAC5D,uBAAuB,qBAAqB,CAAC,CAAA;AAO7C;IAMI,gCAAoB,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QAC5C,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;IACnB,CAAC;IAED,0CAAS,GAAT;QACI,EAAE,CAAA,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC;QAAA,IAAI,CAAA,CAAC;YACF,MAAM,CAAC,GAAG,CAAC;QACf,CAAC;IACL,CAAC;IAED,uCAAM,GAAN,UAAO,MAAa;QAChB,EAAE,CAAA,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAA,CAAC;YACf,IAAI,IAAI,GAAG,IAAI,CAAC;YAChB,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAC,MAAM,CAAC,CAAC,SAAS,CAAC,UAAC,SAAS;gBACpE,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;gBACpB,IAAI,CAAC,OAAO,GAAG,oBAAoB,CAAC;gBACpC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC;gBAC/B,UAAU,CAAC;oBACP,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;gBACtB,CAAC,EAAC,IAAI,CAAC,CAAC;YACZ,CAAC,CAAC,CAAC;QACP,CAAC;IACL,CAAC;IA9BD;QAAC,YAAK,EAAE;;0DAAA;IANZ;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,gBAAgB;YAC1B,WAAW,EAAE,kDAAkD;SAClE,CAAC;;8BAAA;IAkCF,6BAAC;AAAD,CAhCA,AAgCC,IAAA;AAhCY,8BAAsB,yBAgClC,CAAA","file":"recipe-details.component.js","sourcesContent":["import { Component, Input } from '@angular/core';\n\nimport { RecipeService } from '../../models/recipe-service';\nimport { Recipe } from '../../models/recipe';\n\n@Component({\n    selector: 'recipe-details',\n    templateUrl: './app/recipes/recipe-details/recipe-details.html'\n})\n\nexport class RecipeDetailsComponent {\n    @Input() recipe: Recipe;\n\n    private rated: number;\n    private message: string;\n\n    constructor(private recipeService: RecipeService) {\n        this.message = '';\n        this.rated = 0;\n    }\n\n    getRating(): string {\n        if(this.recipe.rating){\n            return this.recipe.rating.toFixed(1);\n        }else{\n            return '0';\n        }\n    }\n\n    onRate(rating:number): void {\n        if(this.rated < 1){\n            var self = this;\n            this.recipeService.evaluate(this.recipe.rid,rating).subscribe((newRating) => {\n                self.rated = rating;\n                self.message = 'Thanks for rating!';\n                self.recipe.rating = newRating;\n                setTimeout(function(){\n                    self.message = '';\n                },5000);\n            });\n        }\n    }\n}\n"]}