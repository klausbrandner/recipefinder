{"version":3,"sources":["models/recipe-service.ts"],"names":[],"mappings":"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","file":"recipe-service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Response } from '@angular/http';\r\nimport { Observable }     from 'rxjs/Observable';\r\n\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport { Recipe } from \"./recipe\";\r\nimport { Ingredient } from \"./ingredient\";\r\n\r\n@Injectable()\r\nexport class RecipeService {\r\n\r\n    private recipes: Recipe[];\r\n    private categories: string[];\r\n    private service = 'http://localhost:4040';\r\n\r\n    constructor (private http: Http) {\r\n        this.recipes = [];\r\n        this.categories = [];\r\n\r\n    }\r\n\r\n    getRecipes(): Observable<Recipe[]> {\r\n        this.recipes = [];\r\n        return this.http.get(this.service + '/recipes').map((res) => {\r\n            let body = res.json();\r\n            console.log(body);\r\n            for(let recipe of body){\r\n                var ingredients = [];\r\n                for(let ingredient of recipe.ingredients){\r\n                    ingredients.push(new Ingredient(ingredient.title, ingredient.quantity));\r\n                }\r\n                this.addRecipe(recipe.rid,\r\n                    recipe.title,\r\n                    recipe.photo,\r\n                    recipe.description,\r\n                    recipe.preparation,\r\n                    recipe.rating,\r\n                    ingredients,\r\n                    recipe.categories\r\n                );\r\n            }\r\n            return this.recipes;\r\n        });\r\n    }\r\n\r\n    addRecipe(rid:number, title:string, photo:string, description:string, preparation:string, rating:number, ingredients:Ingredient[],categories:string[]) {\r\n        this.recipes.push(new Recipe(rid,title,photo,description,preparation,ingredients,rating,categories));\r\n        for(let category of categories){\r\n            if(this.categories.indexOf(category) == -1){\r\n                this.categories.push(category);\r\n            }\r\n        }\r\n    }\r\n\r\n    createRecipe(title:string,photo:string,description:string,preparation:string,ingredients:Ingredient[],categories:string[],done): void {\r\n        let data = {\r\n            title: title,\r\n            photo: photo,\r\n            description: description,\r\n            preparation: preparation,\r\n            ingredients: ingredients,\r\n            categories: categories,\r\n        };\r\n        this.http.post(this.service + '/recipe',data).map((res) => {\r\n            return res.json();\r\n        }).subscribe((data) => {\r\n            this.addRecipe(data.rid,title,photo,description,preparation,0,ingredients,categories);\r\n            done();\r\n        });\r\n    }\r\n\r\n\r\n    getRecipe(rid:number): Promise<Recipe>{\r\n        for(let recipe of this.recipes){\r\n            if(recipe.rid == rid){\r\n                return Promise.resolve(recipe);\r\n            }\r\n        }\r\n        return Promise.resolve({});\r\n    }\r\n\r\n\r\n    getCategories(): Promise<string[]> {\r\n        return Promise.resolve(this.categories);\r\n    }\r\n\r\n    evaluate(rid:number, rating:number): Observable<number> {\r\n        let data = {\r\n            rid: rid,\r\n            rating: rating\r\n        };\r\n        return this.http.post(this.service + \"/evaluate\",data).map((res) => {\r\n            return res.json().rating;\r\n        });\r\n    }\r\n\r\n}\r\n"]}